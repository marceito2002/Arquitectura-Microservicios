def source = env.TAG_NAME ? env.TAG_NAME : env.BRANCH_NAME



def deployOpenShift(env) { 
  	connectOpenShift(env)            	                       
	script {                
    	try{                           		    
        	deployApp()
        	
    	}catch (Exception e) {
    		deployImage() 
    		
    	}finally{
    		updateEnvironment(env)                	    
    	}
    }                
}


def connectOpenShift(env) { 		
	if (env==ENVIRONMENT_PRE){
		echo "DEPLOYING in PRE..."
		sh "oc login ${OPENSHIFT_ENPOINT_PRE} --token=${OPENSHIFT_TOKEN_PRE}"                
		sh "oc project $OPENSHIFT_PROJECT_PRE"	    
	}
	else{
		echo "DEPLOYING in PRO..."
		sh "oc login ${OPENSHIFT_ENPOINT_PRO} --token=${OPENSHIFT_TOKEN_PRO}"                
		sh "oc project $OPENSHIFT_PROJECT_PRO"	    
	}     
}


def deployApp() { 
	sh "oc new-app aherreros/microservicesdocomo:${artifactID}-${artifactVersion} --name ${artifactID}"
	sh "oc expose svc/${artifactID} --port=8080"       
}


def deployImage() { 	
	sh "oc import-image ${artifactID}:${artifactID}-${artifactVersion} --from aherreros/microservicesdocomo:${artifactID}-${artifactVersion}"     
}

def updateEnvironment(env) {
	sh "oc set env dc/${artifactID} CONFIG_SERVER_ENDPOINT=http://configserver:8080"
	sh "oc set env dc/${artifactID} SPRING_PROFILES_ACTIVE=openshift"  	     
}


pipeline {
    agent any

    tools {
        maven 'Maven 3.5.0'
        jdk 'jdk 8u71'     
        oc 'oc3'
    }
                    
    environment{		
		
    	ENVIRONMENT_PRE ="PRO"				
		OPENSHIFT_PROJECT_PRE = "fraudwall"
		OPENSHIFT_TOKEN_PRE="yd58W913GbILTe0q2D7fLSzVu2nMBLOF_iZFgZWEUNE"
		OPENSHIFT_ENPOINT_PRE="https://api.starter-us-west-2.openshift.com"

    	ENVIRONMENT_PRO ="PRE"		
		OPENSHIFT_PROJECT_PRO = "fraudwall"
		OPENSHIFT_TOKEN_PRO="yd58W913GbILTe0q2D7fLSzVu2nMBLOF_iZFgZWEUNE"
		OPENSHIFT_ENPOINT_PRO="https://api.starter-us-west-2.openshift.com"

		FILE_COMPOSE_CONSUMER = "./tracking/tracking/ci/local/docker-compose-consumer.yml"
		FILE_COMPOSE = "./tracking/tracking/ci/local/docker-compose.yml"
		
		def pom =readMavenPom file: './tracking/tracking/pom.xml'
		
		artifactID = pom.getArtifactId()
    	artifactVersion = pom.getVersion()
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
         timeout(time: 1, unit: 'HOURS') 
    }

    stages {
        
        stage('Prepare') {
            steps {
                echo 'levantando consumers....'
                sh 'docker-compose -f ${FILE_COMPOSE_CONSUMER} up -d'                
            }
        }
           
        stage('Build') {
            steps {            
            echo "DATOS DE ENTRADA....$source"                    	   				                                  
                sh 'mvn -B -DskipTests -Ddockerfile.skip=true clean package'               
            }
        }
                
        stage('Install') {
            steps {         
                echo 'Install artifact....'
                sh 'mvn -B clean install -DskipTests'                 
            }
        }
        
        stage('Bring up consumer') {
            steps {
                echo 'Bring up consumers....'
 				sh 'docker-compose -f ${FILE_COMPOSE} up -d'
                
            }
        }
                   
        stage('Test') {
            steps {
                echo 'Install artifact....'
                sh 'mvn -B clean install -Ddockerfile.skip=true'                 
            }
        }   
                               
        stage('Deploy nexus') {
            steps {            	
                echo 'Deloying artifact....'
                //echo "mvn deploy -DskipTests"// -Ddockerfile.username=$DOCKER_USER -Ddockerfile.password=$DOCKER_PASS'   
                //sh 'mvn deploy -DskipTests -Ddockerfile.username=aherreros -Ddockerfile.password=pepe'                 
            }                        
        }                  

        stage('Deploy Openshift Preproduction') {                
            when { branch 'develop' }            
            steps {   	
                deployOpenShift(ENVIRONMENT_PRE)                                                         
            }          
        }  
        
        stage('Deploy Openshift Production') {
            when { branch 'master'}
			// DESCOMENTAR EN JENKINS. Lanzar cuando se crea un tg en master DOCOMO when { allOf { branch 'master'; buildingTag } }
			//Tambien podemos usar un patron para dsplegar una vesón en pro
			//when { tag "release-*" }.            
                  
            steps {            		
                deployOpenShift(ENVIRONMENT_PRO)                                                                     
            }          
        }                          

    }
    post {
        always {
            script {
            	sh 'docker-compose -f ${FILE_COMPOSE_CONSUMER} down'
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
            }
        }
    }
}